// list of length 2
[
  // application
  {
    "fields": [
      // application name
      "testapp",
      // function name list
      [
        "cos",
        "sin"
      ],
      // function demos
      {
        "fields": [
          [
            "cos",
            "sin"
          ],
          [
            [
              {
                "fields": [
                  {
                    "fields": [
                      "cos",
                      {
                        "fields": [
                          0.5
                        ],
                        "type": "Core.Tuple{Core.Float64}"
                      },
                      {
                        "fields": [],
                        "type": "Core.NamedTuple{(), Core.Tuple{}}"
                      }
                    ],
                    "type": "JugsawIR.Call"
                  },
                  0.8775825618903728,
                  {
                    "fields": [
                      [
                        "args_type",
                        "docstring",
                        "kwargs_type"
                      ],
                      [
                        "Core.Tuple{Core.Float64}",
                        "```\ncos(x)\n```\n\nCompute cosine of `x`, where `x` is in radians.\n\nSee also [`cosd`], [`cospi`], [`sincos`], [`cis`].\n\n```\ncos(A::AbstractMatrix)\n```\n\nCompute the matrix cosine of a square matrix `A`.\n\nIf `A` is symmetric or Hermitian, its eigendecomposition ([`eigen`](@ref)) is used to compute the cosine. Otherwise, the cosine is determined by calling [`exp`](@ref).\n\n# Examples\n\n```jldoctest\njulia> cos(fill(1.0, (2,2)))\n2×2 Matrix{Float64}:\n  0.291927  -0.708073\n -0.708073   0.291927\n```\n",
                        "Core.NamedTuple{(), Core.Tuple{}}"
                      ]
                    ],
                    "type": "JugsawIR.JDict{Core.String, Core.String}"
                  }
                ],
                "type": "JugsawIR.JugsawDemo"
              }
            ],
            [
              {
                "fields": [
                  {
                    "fields": [
                      "sin",
                      {
                        "fields": [
                          0.8775825618903728
                        ],
                        "type": "Core.Tuple{Core.Float64}"
                      },
                      {
                        "fields": [],
                        "type": "Core.NamedTuple{(), Core.Tuple{}}"
                      }
                    ],
                    "type": "JugsawIR.Call"
                  },
                  0.7691963548410085,
                  {
                    "fields": [
                      [
                        "args_type",
                        "docstring",
                        "kwargs_type"
                      ],
                      [
                        "Core.Tuple{Core.Float64}",
                        "```\nsin(x)\n```\n\nCompute sine of `x`, where `x` is in radians.\n\nSee also [`sind`], [`sinpi`], [`sincos`], [`cis`].\n\n```\nsin(A::AbstractMatrix)\n```\n\nCompute the matrix sine of a square matrix `A`.\n\nIf `A` is symmetric or Hermitian, its eigendecomposition ([`eigen`](@ref)) is used to compute the sine. Otherwise, the sine is determined by calling [`exp`](@ref).\n\n# Examples\n\n```jldoctest\njulia> sin(fill(1.0, (2,2)))\n2×2 Matrix{Float64}:\n 0.454649  0.454649\n 0.454649  0.454649\n```\n",
                        "Core.NamedTuple{(), Core.Tuple{}}"
                      ]
                    ],
                    "type": "JugsawIR.JDict{Core.String, Core.String}"
                  }
                ],
                "type": "JugsawIR.JugsawDemo"
              }
            ]
          ]
        ],
        "type": "JugsawIR.JDict{Core.String, Core.Array{JugsawIR.JugsawDemo, 1}}"
      }
    ],
    "type": "Jugsaw.AppSpecification"
  },
  // type table
  {
    "fields": [
      [
        "Jugsaw.AppSpecification",
        "Core.Array{Core.String, 1}",
        "JugsawIR.JDict{Core.String, Core.Array{JugsawIR.JugsawDemo, 1}}",
        "Core.Array{Core.Array{JugsawIR.JugsawDemo, 1}, 1}",
        "Core.Array{JugsawIR.JugsawDemo, 1}",
        "JugsawIR.JugsawDemo",
        "JugsawIR.Call",
        "Base.cos",
        "Core.Tuple{Core.Float64}",
        "Core.NamedTuple{(), Core.Tuple{}}",
        "JugsawIR.JDict{Core.String, Core.String}",
        "Base.sin"
      ],
      {
        "fields": [
          [
            "JugsawIR.JDict{Core.String, Core.String}",
            "Core.NamedTuple{(), Core.Tuple{}}",
            "Core.Array{Core.String, 1}",
            "Base.cos",
            "Jugsaw.AppSpecification",
            "JugsawIR.JDict{Core.String, Core.Array{JugsawIR.JugsawDemo, 1}}",
            "Core.Array{Core.Array{JugsawIR.JugsawDemo, 1}, 1}",
            "Core.Tuple{Core.Float64}",
            "Base.sin",
            "JugsawIR.Call",
            "Core.Array{JugsawIR.JugsawDemo, 1}",
            "JugsawIR.JugsawDemo"
          ],
          [
            {
              "fields": [
                "JugsawIR.JDict{Core.String, Core.String}",
                [
                  "keys",
                  "vals"
                ],
                [
                  "Core.Array{Core.String, 1}",
                  "Core.Array{Core.String, 1}"
                ]
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "Core.NamedTuple{(), Core.Tuple{}}",
                [],
                []
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "Core.Array{Core.String, 1}",
                [],
                []
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "Base.cos",
                [],
                []
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "Jugsaw.AppSpecification",
                [
                  "name",
                  "method_names",
                  "method_demos"
                ],
                [
                  "Core.Symbol",
                  "Core.Array{Core.String, 1}",
                  "Base.Dict{Core.String, Core.Array{JugsawIR.JugsawDemo, 1}}"
                ]
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "JugsawIR.JDict{Core.String, Core.Array{JugsawIR.JugsawDemo, 1}}",
                [
                  "keys",
                  "vals"
                ],
                [
                  "Core.Array{Core.String, 1}",
                  "Core.Array{Core.Array{JugsawIR.JugsawDemo, 1}, 1}"
                ]
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "Core.Array{Core.Array{JugsawIR.JugsawDemo, 1}, 1}",
                [],
                []
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "Core.Tuple{Core.Float64}",
                [
                  "1"
                ],
                [
                  "Core.Float64"
                ]
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "Base.sin",
                [],
                []
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "JugsawIR.Call",
                [
                  "fname",
                  "args",
                  "kwargs"
                ],
                [
                  "Core.Any",
                  "Core.Tuple",
                  "Core.NamedTuple"
                ]
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "Core.Array{JugsawIR.JugsawDemo, 1}",
                [],
                []
              ],
              "type": "JugsawIR.JDataType"
            },
            {
              "fields": [
                "JugsawIR.JugsawDemo",
                [
                  "fcall",
                  "result",
                  "meta"
                ],
                [
                  "JugsawIR.Call",
                  "Core.Any",
                  "Base.Dict{Core.String, Core.String}"
                ]
              ],
              "type": "JugsawIR.JDataType"
            }
          ]
        ],
        "type": "JugsawIR.JDict{Core.String, JugsawIR.JDataType}"
      }
    ],
    "type": "JugsawIR.TypeTable"
  }
]