["Base.Dict{Core.String, Core.Any}",[["Jugsaw.JugsawFunctionCall{Main.#solve, Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.CountingMax{2}}, Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}}","Jugsaw.JugsawFunctionCall{Core.UnionAll, Core.Tuple{Core.Int64}, Core.NamedTuple{(), Core.Tuple{}}}","Jugsaw.JugsawFunctionCall{Main.#smallgraph, Core.Tuple{Core.Symbol}, Core.NamedTuple{(), Core.Tuple{}}}","Jugsaw.JugsawFunctionCall{Core.UnionAll, Core.Tuple{}, Core.NamedTuple{(), Core.Tuple{}}}","Jugsaw.JugsawFunctionCall{Main.#solve, Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.SizeMax{GenericTensorNetworks.Single}}, Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}}","Jugsaw.JugsawFunctionCall{Core.DataType, Core.Tuple{}, Core.NamedTuple{(:graph, :weights), Core.Tuple{Jugsaw.Universe.Graph, Core.Array{Core.Float64, 1}}}}","Jugsaw.JugsawFunctionCall{Base.#ones, Core.Tuple{Core.Int64}, Core.NamedTuple{(), Core.Tuple{}}}","Jugsaw.JugsawFunctionCall{Main.#solve, Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.CountingMax{GenericTensorNetworks.Single}}, Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}}"],[["Core.Pair{Jugsaw.JugsawFunctionCall{Main.#solve, Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.CountingMax{2}}, Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}}, GenericTensorNetworks.TruncatedPoly{2, Core.Float64, Core.Float64}}",[["Jugsaw.JugsawFunctionCall{Main.#solve, Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.CountingMax{2}}, Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}}",[["Main.#solve",[],[]],["Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.CountingMax{2}}",[["Main.IndependentSetConfig",[["Jugsaw.Universe.Graph",[10,["Core.Array{Core.Int64, 2}",[[2,15],[1,2,1,5,1,6,2,3,2,7,3,4,3,8,4,5,4,9,5,10,6,8,6,9,7,9,7,10,8,10]],["size","storage"]]],["nv","edges"]],["Core.Array{Core.Int64, 1}",[[10],[1,1,1,1,1,1,1,1,1,1]],["size","storage"]],["Core.Array{Core.Int64, 1}",[[0],[]],["size","storage"]],["Base.Dict{Core.Int64, Core.Int64}",[[],[]],["keys","values"]]],["graph","weights","openvertices","fixedvertices"]],["GenericTensorNetworks.CountingMax{2}",[],[]]],["1","2"]],["Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}",[false,2],["usecuda","seed"]]],["fname","args","kwargs"]],["GenericTensorNetworks.TruncatedPoly{2, Core.Float64, Core.Float64}",[["Core.Tuple{Core.Float64, Core.Float64}",[30.0,5.0],["1","2"]],4.0],["coeffs","maxorder"]]],["first","second"]],["Core.Pair{Jugsaw.JugsawFunctionCall{Core.UnionAll, Core.Tuple{Core.Int64}, Core.NamedTuple{(), Core.Tuple{}}}, GenericTensorNetworks.CountingMax{2}}",[["Jugsaw.JugsawFunctionCall{Core.UnionAll, Core.Tuple{Core.Int64}, Core.NamedTuple{(), Core.Tuple{}}}",["GenericTensorNetworks.CountingMax",["Core.Tuple{Core.Int64}",[2],["1"]],["Core.NamedTuple{(), Core.Tuple{}}",[],[]]],["fname","args","kwargs"]],["GenericTensorNetworks.CountingMax{2}",[],[]]],["first","second"]],["Core.Pair{Jugsaw.JugsawFunctionCall{Main.#smallgraph, Core.Tuple{Core.Symbol}, Core.NamedTuple{(), Core.Tuple{}}}, Jugsaw.Universe.Graph}",[["Jugsaw.JugsawFunctionCall{Main.#smallgraph, Core.Tuple{Core.Symbol}, Core.NamedTuple{(), Core.Tuple{}}}",[["Main.#smallgraph",[],[]],["Core.Tuple{Core.Symbol}",[["Core.Symbol",["petersen"],["storage"]]],["1"]],["Core.NamedTuple{(), Core.Tuple{}}",[],[]]],["fname","args","kwargs"]],["Jugsaw.Universe.Graph",[10,["Core.Array{Core.Int64, 2}",[[2,15],[1,2,1,5,1,6,2,3,2,7,3,4,3,8,4,5,4,9,5,10,6,8,6,9,7,9,7,10,8,10]],["size","storage"]]],["nv","edges"]]],["first","second"]],["Core.Pair{Jugsaw.JugsawFunctionCall{Core.UnionAll, Core.Tuple{}, Core.NamedTuple{(), Core.Tuple{}}}, GenericTensorNetworks.SizeMax{GenericTensorNetworks.Single}}",[["Jugsaw.JugsawFunctionCall{Core.UnionAll, Core.Tuple{}, Core.NamedTuple{(), Core.Tuple{}}}",["GenericTensorNetworks.SizeMax",["Core.Tuple{}",[],[]],["Core.NamedTuple{(), Core.Tuple{}}",[],[]]],["fname","args","kwargs"]],["GenericTensorNetworks.SizeMax{GenericTensorNetworks.Single}",[],[]]],["first","second"]],["Core.Pair{Jugsaw.JugsawFunctionCall{Main.#solve, Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.SizeMax{GenericTensorNetworks.Single}}, Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}}, TropicalNumbers.Tropical{Core.Float64}}",[["Jugsaw.JugsawFunctionCall{Main.#solve, Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.SizeMax{GenericTensorNetworks.Single}}, Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}}",[["Main.#solve",[],[]],["Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.SizeMax{GenericTensorNetworks.Single}}",[["Main.IndependentSetConfig",[["Jugsaw.Universe.Graph",[10,["Core.Array{Core.Int64, 2}",[[2,15],[1,2,1,5,1,6,2,3,2,7,3,4,3,8,4,5,4,9,5,10,6,8,6,9,7,9,7,10,8,10]],["size","storage"]]],["nv","edges"]],["Core.Array{Core.Int64, 1}",[[10],[1,1,1,1,1,1,1,1,1,1]],["size","storage"]],["Core.Array{Core.Int64, 1}",[[0],[]],["size","storage"]],["Base.Dict{Core.Int64, Core.Int64}",[[],[]],["keys","values"]]],["graph","weights","openvertices","fixedvertices"]],["GenericTensorNetworks.SizeMax{GenericTensorNetworks.Single}",[],[]]],["1","2"]],["Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}",[false,2],["usecuda","seed"]]],["fname","args","kwargs"]],["TropicalNumbers.Tropical{Core.Float64}",[4.0],["n"]]],["first","second"]],["Core.Pair{Jugsaw.JugsawFunctionCall{Core.DataType, Core.Tuple{}, Core.NamedTuple{(:graph, :weights), Core.Tuple{Jugsaw.Universe.Graph, Core.Array{Core.Float64, 1}}}}, Main.IndependentSetConfig}",[["Jugsaw.JugsawFunctionCall{Core.DataType, Core.Tuple{}, Core.NamedTuple{(:graph, :weights), Core.Tuple{Jugsaw.Universe.Graph, Core.Array{Core.Float64, 1}}}}",["Main.IndependentSetConfig",["Core.Tuple{}",[],[]],["Core.NamedTuple{(:graph, :weights), Core.Tuple{Jugsaw.Universe.Graph, Core.Array{Core.Float64, 1}}}",[["Jugsaw.Universe.Graph",[10,["Core.Array{Core.Int64, 2}",[[2,15],[1,2,1,5,1,6,2,3,2,7,3,4,3,8,4,5,4,9,5,10,6,8,6,9,7,9,7,10,8,10]],["size","storage"]]],["nv","edges"]],["Core.Array{Core.Float64, 1}",[[10.0],[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]],["size","storage"]]],["graph","weights"]]],["fname","args","kwargs"]],["Main.IndependentSetConfig",[["Jugsaw.Universe.Graph",[10,["Core.Array{Core.Int64, 2}",[[2,15],[1,2,1,5,1,6,2,3,2,7,3,4,3,8,4,5,4,9,5,10,6,8,6,9,7,9,7,10,8,10]],["size","storage"]]],["nv","edges"]],["Core.Array{Core.Int64, 1}",[[10],[1,1,1,1,1,1,1,1,1,1]],["size","storage"]],["Core.Array{Core.Int64, 1}",[[0],[]],["size","storage"]],["Base.Dict{Core.Int64, Core.Int64}",[[],[]],["keys","values"]]],["graph","weights","openvertices","fixedvertices"]]],["first","second"]],["Core.Pair{Jugsaw.JugsawFunctionCall{Base.#ones, Core.Tuple{Core.Int64}, Core.NamedTuple{(), Core.Tuple{}}}, Core.Array{Core.Float64, 1}}",[["Jugsaw.JugsawFunctionCall{Base.#ones, Core.Tuple{Core.Int64}, Core.NamedTuple{(), Core.Tuple{}}}",[["Base.#ones",[],[]],["Core.Tuple{Core.Int64}",[10],["1"]],["Core.NamedTuple{(), Core.Tuple{}}",[],[]]],["fname","args","kwargs"]],["Core.Array{Core.Float64, 1}",[[10.0],[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]],["size","storage"]]],["first","second"]],["Core.Pair{Jugsaw.JugsawFunctionCall{Main.#solve, Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.CountingMax{GenericTensorNetworks.Single}}, Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}}, TropicalNumbers.CountingTropical{Core.Float64, Core.Float64}}",[["Jugsaw.JugsawFunctionCall{Main.#solve, Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.CountingMax{GenericTensorNetworks.Single}}, Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}}",[["Main.#solve",[],[]],["Core.Tuple{Main.IndependentSetConfig, GenericTensorNetworks.CountingMax{GenericTensorNetworks.Single}}",[["Main.IndependentSetConfig",[["Jugsaw.Universe.Graph",[10,["Core.Array{Core.Int64, 2}",[[2,15],[1,2,1,5,1,6,2,3,2,7,3,4,3,8,4,5,4,9,5,10,6,8,6,9,7,9,7,10,8,10]],["size","storage"]]],["nv","edges"]],["Core.Array{Core.Int64, 1}",[[10],[1,1,1,1,1,1,1,1,1,1]],["size","storage"]],["Core.Array{Core.Int64, 1}",[[0],[]],["size","storage"]],["Base.Dict{Core.Int64, Core.Int64}",[[],[]],["keys","values"]]],["graph","weights","openvertices","fixedvertices"]],["GenericTensorNetworks.CountingMax{GenericTensorNetworks.Single}",[],[]]],["1","2"]],["Core.NamedTuple{(:usecuda, :seed), Core.Tuple{Core.Bool, Core.Int64}}",[false,2],["usecuda","seed"]]],["fname","args","kwargs"]],["TropicalNumbers.CountingTropical{Core.Float64, Core.Float64}",[4.0,5.0],["n","c"]]],["first","second"]]]],["keys","values"]]