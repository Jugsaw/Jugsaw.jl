@host = 127.0.0.1
@port = 3500

###

# check system status
GET http://{{host}}:{{port}}/v1.0/metadata

###

# Check agent is alive

PUT http://{{host}}:{{port}}/v1.0/actors/greet/1/method/x
content-type: application/json

"JUGSAW"

###

# Check agent is alive

# @name IndependentSetConfig
POST http://{{host}}:8081/actors/greet/jinguo/method/
Content-Type: application/json
Accept: application/json

{
    "__type__":"JugsawFunctionCall{DataType, Tuple{}, NamedTuple{(:graph, :weights), Tuple{Graph, Array{Float64, 1}}}}",
    "fname":"IndependentSetConfig",
    "args":{"__type__":"Tuple{}"},
    "kwargs":{
        "__type__":"NamedTuple{(:graph, :weights), Tuple{Graph, Array{Float64, 1}}}",
        "graph":{"__type__":"Graph","nv":10,"edges":{
                "__type__":"Array{Int64, 2}",
                "size":[2,15],
                "content":[1,2,1,5,1,6,2,3,2,7,3,4,3,8,4,5,4,9,5,10,6,8,6,9,7,9,7,10,8,10]}
            },
            "weights":[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]
        }
}

###
# @name countingmax2
POST http://{{host}}:8081/actors/greet/jinguo/method/
Content-Type: application/json
Accept: application/json

{"__type__":"JugsawFunctionCall{#solve, Tuple{IndependentSetConfig, CountingMax{2}}, NamedTuple{(:usecuda, :seed, :optimizer), Tuple{Bool, Int64, TreeSA{Int64, StepRangeLen{Float64, TwicePrecision{Float64}, TwicePrecision{Float64}, Int64}, GreedyMethod{MinSpaceOut}, Any}}}}",
    "fname":{"__type__":"#solve"},
    "args":{
        "__type__":"Tuple{IndependentSetConfig, CountingMax{2}}",
        "1":{
            "__type__":"IndependentSetConfig",
            "graph":{
                "__type__":"Graph",
                "nv":10,
                "edges":{
                    "__type__":"Array{Int64, 2}",
                    "size":[2,15],
                    "content":[1,2,1,5,1,6,2,3,2,7,3,4,3,8,4,5,4,9,5,10,6,8,6,9,7,9,7,10,8,10]
                }
            },
            "weights":[1,1,1,1,1,1,1,1,1,1],
            "openvertices":[],
            "fixedvertices":{"__type__":"Dict{Int64, Int64}","data":{}}
        },
        "2":{"__type__":"CountingMax{2}"}
    },
    "kwargs":{
        "__type__":"NamedTuple{(:usecuda, :seed, :optimizer), Tuple{Bool, Int64, TreeSA{Int64, StepRangeLen{Float64, TwicePrecision{Float64}, TwicePrecision{Float64}, Int64}, GreedyMethod{MinSpaceOut}, Any}}}",
        "usecuda":false,
        "seed":2,
        "optimizer":{
            "__type__":"TreeSA{Int64, StepRangeLen{Float64, TwicePrecision{Float64}, TwicePrecision{Float64}, Int64}, GreedyMethod{MinSpaceOut}, Any}",
            "sc_target":20,
            "Î²s":{
                "__type__":"StepRangeLen{Float64, TwicePrecision{Float64}, TwicePrecision{Float64}, Int64}",
                "ref":{
                    "__type__":"TwicePrecision{Float64}",
                    "hi":0.01,
                    "lo":-2.0816681711721684e-19
                },
                "step":{
                    "__type__":"TwicePrecision{Float64}",
                    "hi":0.04999999999999716,
                    "lo":2.842170943040401e-15
                },
                "len":300,
                "offset":1
            },
            "ntrials":10,
            "niters":50,
            "sc_weight":1.0,
            "rw_weight":0.2,
            "initializer":"greedy",
            "nslices":0,
            "fixed_slices":[],
            "greedy_config":{
                "__type__":"GreedyMethod{MinSpaceOut}",
                "method":{"__type__":"MinSpaceOut"},"nrepeat":1
            }
        }
    }
}
#####

@greet_res_ref = {{countingmax2.response.body.*}}

POST http://{{host}}:8081/actors/greet/jinguo/method/fetch

{{greet_res_ref}}

###

# @name count
POST http://{{host}}:8081/actors/Counter/juntian/method/

5

#####

@count_res_ref = {{count.response.body.*}}

POST http://{{host}}:8081/actors/Counter/juntian/method/fetch

"{{count_res_ref}}"