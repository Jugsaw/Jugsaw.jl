var documenterSearchIndex = {"docs":
[{"location":"man/JugsawServer/","page":"Jugsaw.Server","title":"Jugsaw.Server","text":"DocTestSetup = quote\n    using Jugsaw\nend ","category":"page"},{"location":"man/JugsawServer/#Jugsaw.Server","page":"Jugsaw.Server","title":"Jugsaw.Server","text":"","category":"section"},{"location":"man/JugsawServer/","page":"Jugsaw.Server","title":"Jugsaw.Server","text":"Modules = [Jugsaw.Server]\nOrder = [:function, :macro, :type, :module]","category":"page"},{"location":"man/JugsawServer/#Jugsaw.Server.code_handler-Tuple{HTTP.Messages.Request, AppSpecification}","page":"Jugsaw.Server","title":"Jugsaw.Server.code_handler","text":"code_handler(\n    req::HTTP.Messages.Request,\n    app::AppSpecification\n) -> HTTP.Messages.Response\n\n\nHandle the request of generating the API for calling from a specific client language.\n\nResponse\n\n[Success]: a JSON object with requested API code {\"code\" : ...}.\n[NoDemoException]: a JSON object {\"error\" : ...}.\n[ErrorException]: a JSON object {\"error\" : ...}.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.demos_handler-Tuple{AppSpecification}","page":"Jugsaw.Server","title":"Jugsaw.Server.demos_handler","text":"demos_handler(\n    app::AppSpecification\n) -> HTTP.Messages.Response\n\n\nHandle the request of getting application specification, including registered function demos and type definitions.\n\nResponse\n\n[Success]: Jugsaw IR in the form of a JSON object.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.fetch_handler-Tuple{Jugsaw.Server.AppRuntime, HTTP.Messages.Request}","page":"Jugsaw.Server","title":"Jugsaw.Server.fetch_handler","text":"fetch_handler(\n    r::Jugsaw.Server.AppRuntime,\n    req::HTTP.Messages.Request\n) -> HTTP.Messages.Response\n\n\nHandle the request of fetching computed results and return a response with job id.\n\nRequest\n\nA JSON payload that specifies the job id as {\"job_id\" : ...}.\n\nResponse\n\n[Success]: Jugsaw IR in the form of JSON payload.\n[TimedOutException]: a JSON object {\"error\" : ...}.\n[ErrorException]: a JSON object {\"error\" : ...}.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.fetch_status","page":"Jugsaw.Server","title":"Jugsaw.Server.fetch_status","text":"fetch_status(dapr::AbstractEventService, job_id::String; timeout::Real=get_timeout()) -> (status_code, status)\n\nGet the status of a job. The return value is a tuple with the following two elements\n\nstatus_code is a symbol to indicate the status query result, which can be :ok or :timed_out\nstatus is a JobStatus object if the status_code is :ok, otherwise, is nothing.\n\n\n\n\n\n","category":"function"},{"location":"man/JugsawServer/#Jugsaw.Server.get_query_interval-Tuple{}","page":"Jugsaw.Server","title":"Jugsaw.Server.get_query_interval","text":"get_query_interval() -> Any\n\n\nReturns the query time interval of the event service in seconds.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.get_timeout-Tuple{}","page":"Jugsaw.Server","title":"Jugsaw.Server.get_timeout","text":"get_timeout() -> Any\n\n\nReturns the network timeout of the event service access in seconds.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.job_handler-Tuple{Jugsaw.Server.AppRuntime, HTTP.Messages.Request}","page":"Jugsaw.Server","title":"Jugsaw.Server.job_handler","text":"job_handler(\n    r::Jugsaw.Server.AppRuntime,\n    req::HTTP.Messages.Request\n) -> HTTP.Messages.Response\n\n\nHandle the request of function call and returns a response with job id.\n\nRequest\n\nA Jugsaw IR that corresponds to a JobSpec instance.\n\nResponse\n\n[Success]: a JSON object {\"job_id\" : ...}.\n[NoDemoException]: a JSON object {\"error\" : ...}.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.load_object-Tuple{Jugsaw.Server.AbstractEventService, AbstractString, Any}","page":"Jugsaw.Server","title":"Jugsaw.Server.load_object","text":"load_object(dapr::AbstractEventService, job_id::AbstractString, resdemo; timeout::Real) -> (status_code, object)\n\nLoad an object to the main memory. The return value is a tuple with the following two elements\n\nstatus_code is a symbol to indicate the status query result, which can be :ok or :timed_out\nstatus is an object if the status_code is :ok, otherwise, is nothing.\n\nThe keyword argument timeout is should be greater than the expected job run time.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.load_object_as_ir","page":"Jugsaw.Server","title":"Jugsaw.Server.load_object_as_ir","text":"load_object_as_ir(dapr::AbstractEventService, job_id::AbstractString; timeout::Real) -> (status_code, ir)\n\nSimilar to load_object, but returns a Jugsaw IR instead. An object demo is not required.\n\n\n\n\n\n","category":"function"},{"location":"man/JugsawServer/#Jugsaw.Server.open_in_default_browser-Tuple{AbstractString}","page":"Jugsaw.Server","title":"Jugsaw.Server.open_in_default_browser","text":"open_in_default_browser(url)\n\nOpen a URL in the ambient default browser.\n\nNote: this was copied from LiveServer.jl, and the original copy is from Pluto.jl.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.publish_status","page":"Jugsaw.Server","title":"Jugsaw.Server.publish_status","text":"publish_status(dapr::AbstractEventService, job_status::JobStatus) -> nothing\n\nPublish the status of a job to the event service. The published event can be accessed with fetch_status function.\n\n\n\n\n\n","category":"function"},{"location":"man/JugsawServer/#Jugsaw.Server.save_object","page":"Jugsaw.Server","title":"Jugsaw.Server.save_object","text":"save_object(dapr::AbstractEventService, job_id::AbstractString, res) -> nothing\n\nSave an object to the event service in the form of local or web storage. The stored object can be loaded with load_object function.\n\n\n\n\n\n","category":"function"},{"location":"man/JugsawServer/#Jugsaw.Server.serve-Tuple{AppSpecification}","page":"Jugsaw.Server","title":"Jugsaw.Server.serve","text":"serve(\n    app::AppSpecification;\n    eventservice,\n    liveupdate,\n    host,\n    port,\n    localurl,\n    launch_browser,\n    watched_files\n) -> Union{Nothing, Task, HTTP.Servers.Server{HTTP.Servers.Listener{Nothing, Sockets.TCPServer}}}\n\n\nServe this application on specified host and port.\n\nArguments\n\napp is a AppSpecification instance.\n\nKeyword arguments\n\neventservice is a AbstractEventService instance, which is used to store job status and computed results.\n\nThe default value of eventservice depends on environment variable \"JUGSAWSERVER\". If the server runs on the localhost, then the value of \"JUGSAWSERVER\" should be \"LOCAL\" or missing, and default value of eventservice is InMemoryEventService(). Otherwise if the server runs on a docker container, then the value of \"JUGSAW_SERVER\" should be something else, and default value of eventservice is DaprService().\n\nliveupdate is a boolean variable. If liveupdate is true, application will be updated automatically.\n\nThe default value of liveupdate depends on environment variable \"JUGSAWSERVER\". If the server runs on the localhost, then the value of \"JUGSAWSERVER\" should be \"LOCAL\" or missing, and default value of liveupdate is true. Otherwise if the server runs on a docker container, then the value of \"JUGSAW_SERVER\" should be something else, and default value of liveupdate is false.\n\nwatched_files is a list of file paths to watch with Revise.jl, the server will restart automatically on the change of watched files if liveserve is true.\nhost is the IP address or url of the host.\nport is the port to serve the application.\nlaunch_browser is boolean variable. If both this variable and liveserve are true, the default browser will open an html page for end-to-end testing.\nlocalurl is a switch to serve in local mode with a simplified routing table.\n\nIn the local mode, the project name and application name are not required in the request url.\n\nThe route table\n\n(\"GET\", \"/\") -> get the index page (for local debugging).\n(\"POST\", \"/v1/proj/{project}/app/{appname}/ver/{version}/func/{fname}\") -> call a function and return a job id, please check job_handler.\n(\"POST\", \"/v1/job/{jobid}/result\") -> fetch results with a job id, please check [`fetchhandler`](@ref).\n(\"GET\", \"/v1/proj/{project}/app/{appname}/ver/{version}/func\") -> get application information, please check demos_handler.\n(\"GET\", \"/v1/proj/{project}/app/{appname}/ver/{version}/func/{fname}/api/{lang}\") -> get the API call for a client language, please check code_handler.\n(\"GET\", \"/v1/proj/{project}/app/{appname}/ver/{version}/healthz\") -> get the status of current application.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.simpleserve-Tuple{Jugsaw.Server.AppRuntime}","page":"Jugsaw.Server","title":"Jugsaw.Server.simpleserve","text":"simpleserve(runtime::AppRuntime; is_async=false, host=\"0.0.0.0\", port=8088, localurl=false)\n\nServe this application on specified host and port.\n\nArguments\n\nruntime is an AppRuntime instance.\n\nKeyword arguments\n\nis_async is a switch to turn on the asynchronous mode for debugging.\nhost is the IP address or url of the host.\nport is the port to serve the application.\nlocalurl is a switch to serve in local mode with a simplified routing table.\n\nIn the local mode, the project name and application name are not required in the request url.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawServer/#Jugsaw.Server.AbstractEventService","page":"Jugsaw.Server","title":"Jugsaw.Server.AbstractEventService","text":"AbstractEventService\n\nThe abstract type for event service. Its concrete subtypes include\n\nDaprService\nFileEventService\nInMemoryEventService\n\nRequired Interfaces\n\npublish_status\nfetch_status\nsave_object\nload_object\nload_object_as_ir\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawServer/#Jugsaw.Server.AppRuntime","page":"Jugsaw.Server","title":"Jugsaw.Server.AppRuntime","text":"struct AppRuntime{ES<:Jugsaw.Server.AbstractEventService}\n\nThe application instance wrapped with run time information.\n\nFields\n\napp is a AppSpecification instance.\ndapr is a AbstractEventService instance for handling result storing and job status updating.\nchannel is a channel of jobs to be processed.\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawServer/#Jugsaw.Server.DaprService","page":"Jugsaw.Server","title":"Jugsaw.Server.DaprService","text":"DaprService <: AbstractEventService\n\nDapr event service for storing and fetching events and results. Please check AbstractEventService for implemented interfaces.\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawServer/#Jugsaw.Server.FileEventService","page":"Jugsaw.Server","title":"Jugsaw.Server.FileEventService","text":"FileEventService <: AbstractEventService\n\nMocked event service for storing and fetching events and results from the local file system. Please check AbstractEventService for implemented interfaces.\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawServer/#Jugsaw.Server.InMemoryEventService","page":"Jugsaw.Server","title":"Jugsaw.Server.InMemoryEventService","text":"struct InMemoryEventService <: Jugsaw.Server.AbstractEventService\n\nAn event service for storing and fetching events and results from the the main memory. Please check AbstractEventService for implemented interfaces.\n\nFields\n\nprint_event::Bool\nobject_store::Dict{String, Any}\nstatus_store::Dict{String, Jugsaw.Server.JobStatus}\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawServer/#Jugsaw.Server.Job","page":"Jugsaw.Server","title":"Jugsaw.Server.Job","text":"struct Job\n\nA resolved job can be queued and executed in a AppRuntime.\n\nFields\n\nid::String\ncreated_at::Float64\ncreated_by::String\nmaxtime::Float64\ndemo::JugsawDemo\nargs::Tuple\nkwargs::NamedTuple\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawServer/#Jugsaw.Server.JobSpec","page":"Jugsaw.Server","title":"Jugsaw.Server.JobSpec","text":"struct JobSpec\n\nA job with function payload specified as a JugsawADT.\n\nFields\n\nid::String\ncreated_at::Float64\ncreated_by::String\nmaxtime::Float64\nfname::String\nargs::JugsawADT\nkwargs::JugsawADT\n\nHere id is the job id that used to store and fetch computed results.\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawServer/#Jugsaw.Server.JobStatus","page":"Jugsaw.Server","title":"Jugsaw.Server.JobStatus","text":"struct JobStatus\n\nA job status that can be pubished to AbstractEventService.\n\nFields\n\nid::String\nstatus::Jugsaw.Server.JobStatusEnum\ntimestamp::Float64\ndescription::String\n\n\n\n\n\n","category":"type"},{"location":"framework/#Framework","page":"Framework","title":"Framework","text":"","category":"section"},{"location":"framework/","page":"Framework","title":"Framework","text":"<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@9/dist/mermaid.esm.min.mjs';\n  mermaid.initialize({ startOnLoad: true, securityLevel: 'loose' });\n</script>","category":"page"},{"location":"framework/#Deployment-stage","page":"Framework","title":"Deployment stage","text":"","category":"section"},{"location":"framework/","page":"Framework","title":"Framework","text":"Jugsaw applications are deployed through Github action. The CI/CD script is already included in the generated template, which includes the following steps of deployment","category":"page"},{"location":"framework/","page":"Framework","title":"Framework","text":"Build a docker image,\nPush the docker image to the developer's docker registry. This docker registry user account is connected with the developer's Jugsaw website user account,\nPull up the service on a shared node. In the future, elastic computational resources will be available.","category":"page"},{"location":"framework/","page":"Framework","title":"Framework","text":"<div class=\"mermaid\">\n    graph LR;\n    App(Jugsaw app)-->Github((Github Action));\n    Github-->Docker(\"Jugsaw docker registry\\n(harbor.jugsaw.co)\");\n    Docker-->Endpoint(\"Jugsaw's endpoint\\n(jugsaw.co)\");\n    classDef bluenode fill:white,stroke:#3d85c6,stroke-width:2px,text-align:center,line-height:20px;\n    class App,Docker,Endpoint,Github bluenode;\n    click Docker href \"http://harbor.jugsaw.co\" \"Go to Jugsaw docker registry to browse registered images\"\n    click Endpoint href \"http://www.jugsaw.co\" \"Go to Jugsaw website to browse apps\"\n    style Endpoint color:#00f\n    style Docker color:#00f\n</div>","category":"page"},{"location":"framework/#Serving-stage","page":"Framework","title":"Serving stage","text":"","category":"section"},{"location":"framework/","page":"Framework","title":"Framework","text":"Clients can access deployed Jugsaw apps by posting a request to an endpoint. The endpoint can be either jugsaw.co, or a local host that you are testing on. The function payload in the function call requests are represented as Jugsaw' intermediate representation, or Jugsaw IR. The results in the response (to fetch operation) from server are also represented in Jugsaw IR.","category":"page"},{"location":"framework/","page":"Framework","title":"Framework","text":"<div class=\"mermaid\">\n    graph LR;\n    Julia(Julia)-->IR((Jugsaw IR));\n    Python(Python)-->IR;\n    Javascript(Javascript)-->IR;\n    IR-->Server(Endpoint);\n    classDef bluenode fill:white,stroke:#3d85c6,stroke-width:2px,text-align:center,line-height:20px;\n    class Julia,IR,Python,Javascript,Server bluenode;\n</div>","category":"page"},{"location":"framework/#Endpoint","page":"Framework","title":"Endpoint","text":"","category":"section"},{"location":"framework/","page":"Framework","title":"Framework","text":"Jugsaw starts service on 0.0.0.0:8088 by default. The route table of a Jugsaw server could be found in Jugsaw.Server.serve.","category":"page"},{"location":"framework/#Jugsaw-IR","page":"Framework","title":"Jugsaw IR","text":"","category":"section"},{"location":"framework/","page":"Framework","title":"Framework","text":"The design of Jugsaw IR is detailed in the section JugsawIR.","category":"page"},{"location":"developer/#Develop-and-deploy-a-Jugsaw-app","page":"Application Builder Guide","title":"Develop and deploy a Jugsaw app","text":"","category":"section"},{"location":"developer/#Develop","page":"Application Builder Guide","title":"Develop","text":"","category":"section"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"Step 1. To create a Jugsaw app in your working folder, please open a julia REPL and type","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"julia> using Jugsaw\n\njulia> Jugsaw.Template.init(:Test)\n[ Info: Generated Jugsaw app `Test` at folder: /home/leo/jcode/Jugsaw/Test\n┌ Info: Success, please type `julia --project server.jl` to debug your application locally.\n└ To upload your application to Jugsaw website, please check https://jugsaw.github.io/Jugsaw/dev/developer\n\njulia> readdir(\"Test\")\n5-element Vector{String}:\n \"Dockerfile\"     # The script for specifying how docker images are built\n \"Project.toml\"   # Julia package environment specification\n \"README\"         # A description of the Jugsaw app\n \"app.jl\"         # Jugsaw app, which contains functions and tests\n \"server.jl\"      # A script for serving the app","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"The Dockerfile (TODO: explain our Dockerfile) is for building the docker image, so that your application can be containerized and launched by a Jugsaw endpoint. Without special requirements, you have no need to change the contents in Dockerfile.","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"Step 2. To develop the application, please switch to the application folder, and type","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"julia --project server.jl","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"It will live serve the application locally at 0.0.0.0:8088. Any edit to the application file app.jl will be reflected immediately to the service, which is powered by Revise. The app.jl in the template is printed as the following.","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"using Jugsaw\n\n\"\n    greet(x)\n\nThis is the docstring, in which **markdown** grammar and math equations are supported\n\n```math\nx^2\n```\n\"\ngreet(x::String) = \"Hello, $(x)!\"\n\n# create an application\napp = Jugsaw.AppSpecification(:Test)\n\n@register app begin\n    # register by demo\n    greet(\"Jugsaw\")\n    # register by test case, here four functions `sin`, `cos`, `^`, `+` are registered.\n    sin(0.5) ^ 2 + cos(0.5) ^ 2 ≈ 1.0\nend","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"Jugsaw is already included as your project dependency in Project.toml, you can add more dependencies to your project file in the standard Julian way. A Jugsaw app is specified as a Jugsaw.AppSpecification instance, in which you can register functions. A function or an API can be registered as a demo with the @register macro, where a demo is a using case of a function with concrete input values. It can be either a function call or a test case. In the above example, the functions registered in application :Test are greet, sin, cos, ^ and +.","category":"page"},{"location":"developer/#Deploy-on-the-Jugsaw-cloud-(TODO)","page":"Application Builder Guide","title":"Deploy on the Jugsaw cloud (TODO)","text":"","category":"section"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"To deploy a Jugsaw app, you must have a Jugsaw account. You can get a free account from https://www.jugsaw.co. To setup a new Jugsaw app, you should go through the following steps Once you app is ready, please check deploy guide for a detailed guide.","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"First, you should add your Jugsaw deploy key to your repository secrets. A Jugsaw deploy key can be obtained from the Jugsaw website -> Profile -> Deploy Key.","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"To set up repository secrets for GitHub action, follow the steps below:","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"Go to the GitHub repository where you want to set up the secrets.\nClick on the \"Settings\" tab.\nClick on the \"Secrets\" option.\nClick on the \"New repository secret\" button.\nEnter the name of the secret in the \"Name\" field as \"JUGSAWDEPLOYKEY\".\nEnter the value of the secret in the \"Value\" field.\nClick on the \"Add secret\" button.","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"In your GitHub action workflow file, reference the secrets using the syntax {{secrets.SECRET_NAME}}.","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"Note: It's important to keep your secrets secure and not include them in your code or make them publicly available.","category":"page"},{"location":"developer/#Deploy-on-a-local-machine-(TODO)","page":"Application Builder Guide","title":"Deploy on a local machine (TODO)","text":"","category":"section"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"note: Note\nThis section is about deploying a containerized Jugsaw application on a local machine. If you are only interested in local deployment without docker, please use julia --project server.jl that detailed in the section Develop.","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"Install docker on your local machine,\nPull the docker image from the remote,\nPull up the service by typing","category":"page"},{"location":"developer/","page":"Application Builder Guide","title":"Application Builder Guide","text":"...","category":"page"},{"location":"client-python/#Python-Client","page":"Python Client","title":"Python Client","text":"","category":"section"},{"location":"client-julia/#Julia-Client","page":"Julia Client","title":"Julia Client","text":"","category":"section"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"Check Python and Javascript versions.","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"Jugsaw's Julia client, or Jugsaw.Client, is a submodule of the Julia package Jugsaw. To install Jugsaw, please open Julia's interactive session (known as REPL) and type the following command","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"julia> using Pkg; Pkg.add(\"Jugsaw\")","category":"page"},{"location":"client-julia/#Tutorial","page":"Julia Client","title":"Tutorial","text":"","category":"section"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"As a first step, you need to decide which remote to execute a function. By default, it uses the Jugsaw Cloud.","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"remote = ","category":"page"},{"location":"client-julia/#Advanced-features","page":"Julia Client","title":"Advanced features","text":"","category":"section"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"Advanced features require you to setup your Jugsaw account.","category":"page"},{"location":"client-julia/#Using-shared-nodes","page":"Julia Client","title":"Using shared nodes","text":"","category":"section"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"The following is an example of launching a Jugsaw app on the shared endpoint with the Julia language (we have multiple clients).","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"julia> using JugsawClient\n\njulia> msg = open(JugsawClient.SharedNode(\n                endpoint=\"https://api.jugsaw.co\"),\n                app=\"hello-world\",\n                uuid=\"79dccd12-cad8-11ed-387a-f9e5b0f14a94\",\n                keep=true) do app\n        app.greet(\"World\")\n    end;\n\njulia> println(msg[\"result\"]) # the result\nHello World!\n\njulia> println(msg[\"uuid\"])   # the instance id\n\"79dccd12-cad8-11ed-387a-f9e5b0f14a94\"\n\njulia> println(msg[\"time\"])   # time in seconds\n0.001\n\njulia> println(msg[\"exit code\"])   # exit code\n0","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"Rules","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"If uuid is not specified, then the function will be executed on the shared instance (if any).\nIf uuid is specified, then the specific instance will be used (may throw InstanceNotExistError).\nUnless keep is true, an instance will be killed after being inactive for 20min.","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"A free tier user can keep at most 10 instances at the same time. Please go to the control panel to free some instances if you see a InstanceQuotaError or subscribe our Jugsaw premium.","category":"page"},{"location":"client-julia/#Using-cluster-nodes","page":"Julia Client","title":"Using cluster nodes","text":"","category":"section"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"The following is an example of launching a Jugsaw app on a cluster with Julia language (we have multiple clients).","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"julia> using JugsawClient\n\njulia> msg = open(JugsawClient.ClusterNode(\n                endpoint=\"https://api.hkust-cluster.edu.cn\"),\n                app=\"hello-world\",\n                ncpu = 5,\n                ngpu = 1,\n                usempi = false,\n                usecuda = true,\n                timelimit = 3600,   # in seconds\n                ) do app\n        app.greet(\"World\")\n    end;\n[ Info: You can manage your job with this URI: https://api.hkust-cluster.edu.cn/monitor/79dccd12-cad8-11ed-387a-f9e5b0f14a94/\n\njulia> println(msg[\"exit code\"])   # exit code\n0","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"Rules","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"Cluster Jugsaw call is stateless.\nThere might be an overhead in using clusters. Cluster pull the reqested app from jugsaw.co to local, create a singularity instance, and launch the job.\nThe result is not returned directly, instead, one should use the returned URI to access the result and manage the jobs.","category":"page"},{"location":"client-julia/#Chained-function-call","page":"Julia Client","title":"Chained function call","text":"","category":"section"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"When Jugsaw server gets a chained function call, like sin(cos(0.5)). The following two tasks will be added to the task queue.","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"Call(cos, (0.5,), (;)) -> id1\nCall(sin, (object_getter(state_store, id1),), (;))","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"where -> points to the id of the returned object in the state_store. The state_store is a dictionary mapping an object id to its value. When querying an object from the state_store, the program waits for the corresponding task to complete.","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"object_getter(id) returns a Call instance with the following definition","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"function object_getter(state_store::StateStore, object_id::String)\n    Call((s, id)->Meta.parse(Base.getindex(s, id)), (state_store, object_id), (;))\nend","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"The nested Call is then executed by the JugsawIR.fevalself with the following steps","category":"page"},{"location":"client-julia/","page":"Julia Client","title":"Julia Client","text":"sin function is triggered,\nwhile rendering the arguments of sin, the object getter(Call) will trigger the state_store[id1],\nwait for the cos function to complete,\nwith the returned object, execute the sin function.","category":"page"},{"location":"design/#Design","page":"Design","title":"Design","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"(Image: )","category":"page"},{"location":"design/#Overview","page":"Design","title":"Overview","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"<!–","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"What Jugsaw is\nWhat we provide\nFor application developers\nBridge the gap between users and developers?\nFor general users\nA world of ready-to-use applications?","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"–>","category":"page"},{"location":"design/#The-Problem-We-Want-to-Solve","page":"Design","title":"The Problem We Want to Solve","text":"","category":"section"},{"location":"design/#A-Common-Case","page":"Design","title":"A Common Case","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"A typical open source scientific computing problem solving workflow includes","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"A developer releases an open software on Github.\nUsers know his package from the publications, conferences or friends. (*)\nUsers download the open source code from Git or some package management system (e.g. Julia package management system *).\nUser deploy the environment on their local host and test the software, (*)\nSometimes, uses need to learn a new language like Julia (*).\nUser deploy the environment on a cluster/EC2, which typically runs Linux system (*).\nFact: all top 500 clusters run linux system, over 90% EC2 ship linux system (*).\nUser use slurm system to submit serial/multi-threading/MPI/GPU tasks (*).\nDownload the data from the cluster/EC2 to local host for analysing.","category":"page"},{"location":"design/#The-Scope-of-the-Problem-We-Want-to-Solve","page":"Design","title":"The Scope of the Problem We Want to Solve","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Domains/Subjects\nProgramming Languages","category":"page"},{"location":"design/#Existing-Solutions","page":"Design","title":"Existing Solutions","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"TODO: list the pros and cons of each existing solution.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"PyCall.jl/PythonCall.jl\nHuggingFace\nStipple.jl","category":"page"},{"location":"design/#Proposed-Solution","page":"Design","title":"Proposed Solution","text":"","category":"section"},{"location":"design/#Key-Concepts","page":"Design","title":"Key Concepts","text":"","category":"section"},{"location":"design/#Contributor","page":"Design","title":"Contributor","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Contributors are those who are familiar with a specific library. They can develop applications with the help of Jugsaw SDK and deploy them on our app store.","category":"page"},{"location":"design/#User","page":"Design","title":"User","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Different from Contributor, general users do not need to understand all the underlying implementation details.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"For entry level users, they are more interested in interacting with the Applications through the web portal. ","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"For experienced users, they can take an Application as a black box and reliably embed it in their own code logic. For some complex algorithms, they may even compose an arbitrary computation graph and schedule it on our cluster.","category":"page"},{"location":"design/#Application","page":"Design","title":"Application","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"An application is usually a collection of Jugs or Saws which share the same runtime environment. Developers can specify the required resources to run the application. Our system may automatically create several instances based on the number of queueing requests.","category":"page"},{"location":"design/#Job","page":"Design","title":"Job","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"To initiate the computation, Users need to submit a Job either through SDK or on the web portal.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"A job describes the target Jug/Saw and corresponding arguments.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"{\n    \"target\": {\n        \"app\": \"hello-world\",\n        \"method\": \"greet\"\n    },\n    \"arguments\": [\n        \"world\"\n    ]\n}","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"The result of an job is a Future.","category":"page"},{"location":"design/#Jug","page":"Design","title":"Jug","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"A Jug is a stateful computation unit. Each Jug is associated with a unique id.","category":"page"},{"location":"design/#Saw","page":"Design","title":"Saw","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"A Saw is a stateless computation unit. Unlike Jug, there's no id associated with it.","category":"page"},{"location":"design/#Data-Model","page":"Design","title":"Data Model","text":"","category":"section"},{"location":"design/#Future","page":"Design","title":"Future","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"A Future in Jugsaw is similar to the Future in Julia (or a kind of AbstractRemoteRef to be more specific). It is just an ID. Users can fetch the result from it with SDK.","category":"page"},{"location":"design/#Core-Components","page":"Design","title":"Core Components","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"TODO: Add images to explain how they are assembled in our product.","category":"page"},{"location":"design/#Jugsaw-SDK","page":"Design","title":"Jugsaw SDK","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"For now we'll focus on the Julia SDK. But the ideas should also apply to SDK in other languages in the future.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"Basically, the SDK contains two parts: the client side and the server side.","category":"page"},{"location":"design/#Jugsaw-Server","page":"Design","title":"Jugsaw Server","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Jug/Saw manager\n(De)Activate Jug/Saw\nDispatch requests\nState Monitoring","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"note: Note\nThe manager is STATIC at the moment. This means that, once started, the manager can only handle requests to predefined Jugs or Saws.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"Example:","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"# app.jl\n\n## Jug\ngreet(name::String=\"World\")::String = \"Hello, $name!\"\n\n## Saw\nBase.@kwdef struct Counter\n    name::String = greet()\n    n::Ref{Int} = Ref(0)\nend\n\n(c::Counter)(x::Int=1)::String = c.n[] += x","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"# manager.jl\nusing Jugsaw\n\nregister(Jug, greet)\nregister(Saw, Counter)\n\nserve()","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"# config.yaml\n- name: hello-world\n- version: v0.1.0\n- authors:\n  - Alice\n  - Bob","category":"page"},{"location":"design/#Jugsaw-Client","page":"Design","title":"Jugsaw Client","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Submit job\nFetch data from Future\n(De)Serializer","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"using Jugsaw\n\nopen(Client(endpoint=\"https://api.jugsaw.co\"), app=\"hello-world\") do app\n    # Saw\n    msg = app.greet()\n    println(msg[])\n\n    # Jug\n    counter = app.Counter()\n    counter()\n    counter(2)\n    println(counter(3)[])\n\n    # JugSaw\n    x = app.Counter(name=app.greet())\n    x()\n    x(2)\n    println(string(x)[])\n\n    # Utils\n    signature(app.greet)\n    signature(app.count)\nend","category":"page"},{"location":"design/#Jugsaw-Runtime","page":"Design","title":"Jugsaw Runtime","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Scheduling\nAuto-scaling","category":"page"},{"location":"design/#Jugsaw-Proto","page":"Design","title":"Jugsaw Proto","text":"","category":"section"},{"location":"design/#Jugsaw-Frontend","page":"Design","title":"Jugsaw Frontend","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Communication strategy\nEmbedding in other tools\nJupyter Notebook\nPluto\nDocumenter.jl","category":"page"},{"location":"design/#Key-Features","page":"Design","title":"Key Features","text":"","category":"section"},{"location":"design/#Pluggable","page":"Design","title":"Pluggable","text":"","category":"section"},{"location":"design/#The-Ecosystem-Around-Jugsaw","page":"Design","title":"The Ecosystem Around Jugsaw","text":"","category":"section"},{"location":"design/#Comparison-with-Other-Products","page":"Design","title":"Comparison with Other Products","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"HuggingFace Spaces\nReplicate\nRay\nPluto","category":"page"},{"location":"design/#FAQ","page":"Design","title":"FAQ","text":"","category":"section"},{"location":"design/#Why-do-You-Choose-to-Work-on-This-Field?","page":"Design","title":"Why do You Choose to Work on This Field?","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Our aspiration\nThe potential market size","category":"page"},{"location":"design/#Why-**You**?","page":"Design","title":"Why You?","text":"","category":"section"},{"location":"design/#Why-Julia?","page":"Design","title":"Why Julia?","text":"","category":"section"},{"location":"design/#References","page":"Design","title":"References","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Ray AIR Technical Whitepaper","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"DocTestSetup = quote\n    using JugsawIR\nend ","category":"page"},{"location":"man/JugsawIR/#JugsawIR","page":"JugsawIR","title":"JugsawIR","text":"","category":"section"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"JugsawIR is an intermediate representation (IR) for exposing and using cloud scientific applications. Its grammar is compatible with JSON at the time of writing, however, it might undergo a refactor to support richer features. The final form should be a real programming language for Web Virtual Machine.","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"Jugsaw IR can represent data, data types, and function calls. The basic rule is representing a Jugsaw object as a JSON object with extra constaints,","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"Integers, floating point numbers, Nothing, Missing, UndefInitializer, Symbol and String are directly representable.\nGeneric objects are represented by a JSON object with at most two fields: fields and type (optional).\nSome objects are specialized, including Array, Tuple, Dict, DataType and Enum.","category":"page"},{"location":"man/JugsawIR/#Examples-1:-Representing-Data","page":"JugsawIR","title":"Examples 1: Representing Data","text":"","category":"section"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"julia> julia2ir(1.0+2im)[1] |> println\n{\"fields\":[1.0,2.0],\"type\":\"Base.Complex{Core.Float64}\"}","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"Or equivalently, as","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"{\"type\":\"Base.Complex{Core.Float64}\",\"fields\":[1.0,2.0]}","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"Or when calling a remote function, one can ommit the \"type\" specification, since the remote already has a copy of data types.","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"{\"fields\":[2,3]}","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"note: Note\nThe julia2ir function returns a two element tuple, a representation of object, and a TypeTable to delare types.","category":"page"},{"location":"man/JugsawIR/#Examples-2:-Representing-Data-Type","page":"JugsawIR","title":"Examples 2: Representing Data Type","text":"","category":"section"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"A type is a special Jugsaw object with three fields name, fieldnames and fieldtypes. For example, to represent a complex number type, we can create the following IR","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"julia> julia2ir(ComplexF64)[1] |> println\n{\"fields\":[\"Base.Complex{Core.Float64}\",[\"re\",\"im\"],[\"Core.Float64\",\"Core.Float64\"]],\"type\":\"Core.DataType\"}","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"For convenience, JugsawIR returns a TypeTable instance to represent the types used in parsing.","category":"page"},{"location":"man/JugsawIR/#Examples-3:-Representing-Funcation-Call","page":"JugsawIR","title":"Examples 3: Representing Funcation Call","text":"","category":"section"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"A function call is represented as a Jugsaw object with three fields fname, args and kwargs.","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"julia> fc = Call(sin, (2.0,), (;))\nsin(2.0; )\n\njulia> julia2ir(fc)[1] |> println\n{\"fields\":[{\"fields\":[],\"type\":\"Base.sin\"},{\"fields\":[2.0],\"type\":\"Core.Tuple{Core.Float64}\"},{\"fields\":[],\"type\":\"Core.NamedTuple{(), Core.Tuple{}}\"}],\"type\":\"JugsawIR.Call{Base.sin, Core.Tuple{Core.Float64}, Core.NamedTuple{(), Core.Tuple{}}}\"}","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"It is not different with regular Jugsaw object, except that it can executed when it is used to represent a remote call request.","category":"page"},{"location":"man/JugsawIR/#The-Grammar","page":"JugsawIR","title":"The Grammar","text":"","category":"section"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"The grammar of JugsawIR in the EBNF format, which can be parsed by lark in Python, Lerche.jl in Julia and hopefully lark-js in Javascript.","category":"page"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"object: genericobj1\n        | genericobj2\n        | genericobj3\n        | list\n        | string\n        | number\n        | true\n        | false\n        | null\n\ngenericobj1 : \"{\" \"\\\"fields\\\"\" \":\" list \"}\"\ngenericobj2 : \"{\" \"\\\"type\\\"\" \":\" ESCAPED_STRING \",\" \"\\\"fields\\\"\" \":\" list \"}\"\ngenericobj3 : \"{\" \"\\\"fields\\\"\" \":\" list \",\" \"\\\"type\\\"\" \":\" ESCAPED_STRING \"}\"\n\nlist : \"[\" [object (\",\" object)*] \"]\"\nstring : ESCAPED_STRING\nnumber : SIGNED_NUMBER\ntrue : \"true\"\nfalse : \"false\"\nnull : \"null\"\n\n%import common.ESCAPED_STRING\n%import common.SIGNED_NUMBER\n%import common.WS\n%ignore WS","category":"page"},{"location":"man/JugsawIR/#APIs","page":"JugsawIR","title":"APIs","text":"","category":"section"},{"location":"man/JugsawIR/","page":"JugsawIR","title":"JugsawIR","text":"Modules = [JugsawIR]\nOrder = [:function, :macro, :type, :module]","category":"page"},{"location":"man/JugsawIR/#JugsawIR.ir2julia-Tuple{String, Any}","page":"JugsawIR","title":"JugsawIR.ir2julia","text":"ir2julia(str::String, demo) -> Any\n\n\nConvert Jugsaw IR to julia object, given a demo object as a reference. Please check julia2ir for the inverse map.\n\nExamples\n\njulia> JugsawIR.ir2julia(\"{\\\"fields\\\" : [3, 4]}\", 1+2im)\n3 + 4im\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawIR/#JugsawIR.julia2ir-Tuple{Any}","page":"JugsawIR","title":"JugsawIR.julia2ir","text":"julia2ir(obj) -> Tuple{Any, Any}\n\n\nConvert julia object to Jugsaw IR and a type table, where the type table is a special Jugsaw IR that stores the type definitions. Please check ir2julia for the inverse map.\n\nExamples\n\njulia> ir, typetable = JugsawIR.julia2ir(1+2im);\n\njulia> ir\n\"{\\\"fields\\\":[1,2],\\\"type\\\":\\\"Base.Complex{Core.Int64}\\\"}\"\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawIR/#JugsawIR.Call","page":"JugsawIR","title":"JugsawIR.Call","text":"struct Call\n\nFields\n\nfname::Any\nargs::Tuple\nkwargs::NamedTuple\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawIR/#JugsawIR.JArray","page":"JugsawIR","title":"JugsawIR.JArray","text":"struct JArray{T}\n\nThe data type for arrays in Jugsaw.\n\nFields\n\nsize::Vector{Int64}\nstorage::Vector\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawIR/#JugsawIR.JDataType","page":"JugsawIR","title":"JugsawIR.JDataType","text":"struct JDataType\n\nThe type for specifying data type in Jugsaw.\n\nFields\n\nname::String\nfieldnames::Vector{String}\nfieldtypes::Vector{String}\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawIR/#JugsawIR.JDict","page":"JugsawIR","title":"JugsawIR.JDict","text":"struct JDict{K, V}\n\nThe dictionary type in Jugsaw.\n\nFields\n\nkeys::Vector\nvals::Vector\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawIR/#JugsawIR.JEnum","page":"JugsawIR","title":"JugsawIR.JEnum","text":"struct JEnum\n\nThe enum type in Jugsaw.\n\nFields\n\nkind::String\nvalue::String\noptions::Vector{String}\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawIR/#JugsawIR.JugsawADT","page":"JugsawIR","title":"JugsawIR.JugsawADT","text":"JugsawADT is an intermediate representation between Jugsaw IR and Julia language.\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawIR/#JugsawIR.TypeTable","page":"JugsawIR","title":"JugsawIR.TypeTable","text":"struct TypeTable\n\nThe type definitions.\n\nFields\n\nnames::Vector{String}\ndefs::Dict{String, JDataType}\n\nThe defs defines a mapping from the type name to a JDataType instance.\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawClient/","page":"Jugsaw.Client","title":"Jugsaw.Client","text":"DocTestSetup = quote\n    using Jugsaw\nend ","category":"page"},{"location":"man/JugsawClient/#Jugsaw.Client","page":"Jugsaw.Client","title":"Jugsaw.Client","text":"","category":"section"},{"location":"man/JugsawClient/","page":"Jugsaw.Client","title":"Jugsaw.Client","text":"Modules = [Jugsaw.Client]\nOrder = [:function, :macro, :type, :module]","category":"page"},{"location":"man/JugsawClient/#Jugsaw.Client.call-Tuple{Jugsaw.Client.ClientContext, Jugsaw.Client.Demo, Vararg{Any}}","page":"Jugsaw.Client","title":"Jugsaw.Client.call","text":"call(\n    context::Jugsaw.Client.ClientContext,\n    demo::Jugsaw.Client.Demo,\n    args...;\n    kwargs...\n) -> Jugsaw.Client.LazyReturn\n\n\nLaunch a function call.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawClient/#Jugsaw.Client.healthz-Tuple{Jugsaw.Client.ClientContext}","page":"Jugsaw.Client","title":"Jugsaw.Client.healthz","text":"healthz(context::Jugsaw.Client.ClientContext) -> Any\n\n\nCheck the status of the application.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawClient/#Jugsaw.Client.request_app-Tuple{Jugsaw.Client.ClientContext, Symbol}","page":"Jugsaw.Client","title":"Jugsaw.Client.request_app","text":"request_app(\n    context::Jugsaw.Client.ClientContext,\n    appname::Symbol\n) -> Jugsaw.Client.App\n\n\nRequest an application from an endpoint.\n\nArguments\n\ncontext is a ClientContext instance, which contains contextual information like the endpoint.\nappname specificies the application to be fetched.\n\n\n\n\n\n","category":"method"},{"location":"man/JugsawClient/#Jugsaw.Client.App","page":"Jugsaw.Client","title":"Jugsaw.Client.App","text":"struct App\n\nThe Jugsaw application instance.\n\nnote: Note\nThe Base.getproperty function has been overloaded to favor fetching demos. To get fields, please use app[fieldname]. For example, to get the application name, one should use app[:name].\n\nFields\n\nname::Symbol\nmethod_demos::OrderedCollections.OrderedDict{Symbol, Vector{Jugsaw.Client.Demo}}\ntype_table::TypeTable\ncontext::Jugsaw.Client.ClientContext\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawClient/#Jugsaw.Client.ClientContext","page":"Jugsaw.Client","title":"Jugsaw.Client.ClientContext","text":"mutable struct ClientContext\n\nFields\n\nendpoint::String\nlocalurl::Bool\nproject::String\nappname::Symbol\nversion::String\nfname::Symbol\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawClient/#Jugsaw.Client.Demo","page":"Jugsaw.Client","title":"Jugsaw.Client.Demo","text":"struct Demo\n\nFields\n\nfcall::Call\nresult::Any\nmeta::Dict{String}\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawClient/#Jugsaw.Client.DemoRef","page":"Jugsaw.Client","title":"Jugsaw.Client.DemoRef","text":"struct DemoRef\n\nFields\n\ndemo::Jugsaw.Client.Demo\ncontext::Jugsaw.Client.ClientContext\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawClient/#Jugsaw.Client.DemoRefs","page":"Jugsaw.Client","title":"Jugsaw.Client.DemoRefs","text":"struct DemoRefs\n\nFields\n\nname::Symbol\ndemos::Vector{Jugsaw.Client.Demo}\ncontext::Jugsaw.Client.ClientContext\n\n\n\n\n\n","category":"type"},{"location":"man/JugsawClient/#Jugsaw.Client.LazyReturn","page":"Jugsaw.Client","title":"Jugsaw.Client.LazyReturn","text":"struct LazyReturn\n\nA callable lazy result. To fetch the result value, please use lazyresult().\n\nFields\n\ncontext::Jugsaw.Client.ClientContext\njob_id::String\ndemo_result::Any\n\n\n\n\n\n","category":"type"},{"location":"client-javascript/#Javascript-Client","page":"Javascript Client","title":"Javascript Client","text":"","category":"section"},{"location":"client-javascript/","page":"Javascript Client","title":"Javascript Client","text":"<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/gh/Jugsaw/Jugsaw/src/js/jugsawirparser.js\"></script>","category":"page"},{"location":"client-javascript/","page":"Javascript Client","title":"Javascript Client","text":"It is easy to include the javascript API.","category":"page"},{"location":"client-javascript/#Advanced-topics","page":"Javascript Client","title":"Advanced topics","text":"","category":"section"},{"location":"client-javascript/","page":"Javascript Client","title":"Javascript Client","text":"<head>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/gh/Jugsaw/Jugsaw/src/js/jugsawirparser.js\"></script>\n<script type=\"module\" src=\"https://md-block.verou.me/md-block.js\"></script>\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/styles/default.min.css\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/highlight.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/languages/julia.min.js\"></script>\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  extensions: [\"tex2jax.js\"],\n  tex2jax: {\n    inlineMath: [[\"$\",\"$\"]],\n    displayMath: [['$$','$$']],\n    },\n  asciimath2jax: {delimiters: []},\n  CommonHTML: {\n    scale: 120\n  }\n});\n</script>\n<script type=\"text/javascript\" async src=\n\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML\"></script>\n<script>\nhljs.initHighlightingOnLoad();\n</script>\n</head>","category":"page"},{"location":"get-started/#Get-started","page":"Get started","title":"Get started","text":"","category":"section"},{"location":"get-started/","page":"Get started","title":"Get started","text":"The developer guide and end user guides can be found bellow. The developer guide is about how to create and register a Jugsaw app. A Jugsaw app must be written in Julia or contained in a Julia wrapper.","category":"page"},{"location":"get-started/","page":"Get started","title":"Get started","text":"[Get started] as Jugsaw app developer.","category":"page"},{"location":"get-started/","page":"Get started","title":"Get started","text":"The end user guides are about how to access the Jugsaw app through the application web page or multi-language clients. The list of supported client languages include","category":"page"},{"location":"get-started/","page":"Get started","title":"Get started","text":"[Get started] as Julia end user.\n[Get started] as Python end user.\n[Get started] as Javascript end user.","category":"page"},{"location":"man/Jugsaw/","page":"Jugsaw","title":"Jugsaw","text":"DocTestSetup = quote\n    using Jugsaw\nend ","category":"page"},{"location":"man/Jugsaw/#Jugsaw","page":"Jugsaw","title":"Jugsaw","text":"","category":"section"},{"location":"man/Jugsaw/#APIs","page":"Jugsaw","title":"APIs","text":"","category":"section"},{"location":"man/Jugsaw/","page":"Jugsaw","title":"Jugsaw","text":"Modules = [Jugsaw]\nOrder = [:function, :macro, :type, :module]","category":"page"},{"location":"man/Jugsaw/#Jugsaw.generate_code-Tuple{String, Any, Any, Any, Int64, JugsawADT, JugsawADT}","page":"Jugsaw","title":"Jugsaw.generate_code","text":"generate_code(\n    lang::String,\n    endpoint,\n    appname,\n    fname,\n    idx::Int64,\n    fcall::JugsawADT,\n    typetable::JugsawADT\n) -> String\n\n\nGenerate code for target language.\n\nArguments\n\nlang can be a string or an AbstractLang instance that specifies the target language.\n\nPlease use subtypes(AbstractLang) for supported client languages.\n\nendpoint is the url for service provider, e.g. it can be https://www.jugsaw.co.\nappname is the application name.\nfcall is a JugsawADT that specifies the function call.\nidx is the index of method instance.\ntypetable is a TypeTable instance with the type definitions.\n\n\n\n\n\n","category":"method"},{"location":"man/Jugsaw/#Jugsaw.@register-Tuple{Any, Any}","page":"Jugsaw","title":"Jugsaw.@register","text":"@register app expression\n\nRegister a function to the application. A function can be registered as a demo, which can take the following forms.\n\n@register app f(args...; kwargs...) == result    # a function call + a test\n@register app f(args...; kwargs...) ≈ result     # similar to the above\n@register app f(args...; kwargs...)::T           # a function call with assertion of the return type\n@register app f(args...; kwargs...)              # a function call\n@register app begin ... end                      # a sequence of function\n\nThe @register macro checks and executes the expression. If the tests and type asserts in the expression does not hold, an error will be thrown. Otherwise, both the top level function call and those appear in the input arguments will be registered.\n\n\n\n\n\n","category":"macro"},{"location":"man/Jugsaw/#Jugsaw.AppSpecification","page":"Jugsaw","title":"Jugsaw.AppSpecification","text":"struct AppSpecification\n\nThe application specification.\n\nFields\n\nname::Symbol\nmethod_names::Vector{String}\nmethod_demos::Dict{String, Vector{JugsawDemo}}\n\n\n\n\n\n","category":"type"},{"location":"man/Jugsaw/#Jugsaw.NoDemoException","page":"Jugsaw","title":"Jugsaw.NoDemoException","text":"struct NoDemoException <: Exception\n\nThis error was thrown when a demo matching the target type signature is not found.\n\nFields\n\nfunc_sig::Any\nmethods::Any\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Jugsaw","category":"page"},{"location":"#Jugsaw","page":"Home","title":"Jugsaw","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Jugsaw is a toolkit designed to assist scientific computing scientists in deploying their applications to the cloud. Applications are deployed as Jugsaw apps, which consist of a set of functions registered on the Jugsaw website.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nCurrently, these functions must be written in Julia or encapsulated within a Julia wrapper (C, Fortran, Python).","category":"page"},{"location":"#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"get-started.md\",\n]\nDepth = 1","category":"page"}]
}
